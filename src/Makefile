# Variable for filename for store running procees id
PID_FILE = /tmp/orchestrator.pid
# We can use such syntax to get main.go and other root Go files.
GO_FILES = $(wildcard *.go)

CURRENT_DIR = $(shell pwd)

# Start task performs "go run main.go" command and writes it's process id to PID_FILE.
start:
	MONGODB_USER=root \
	MONGODB_PASS=rootpassword \
	MONGODB_HOST=0.0.0.0 \
	MONGODB_PORT=27017 \
	go run $(GO_FILES) & echo $$! > $(PID_FILE)

# You can also use go build command for start task
# start:
#   go build -o /bin/orchestrator . && \
#   /bin/orchestrator & echo $$! > $(PID_FILE)

# Stop task will kill process by ID stored in PID_FILE (and all child processes by pstree).  
stop:
	-kill `pstree -p \`cat $(PID)\` | tr "\n" " " |sed "s/[^0-9]/ /g" |sed "s/\s\s*/ /g"` 
  
# Before task will only prints message. Actually, it is not necessary. You can remove it, if you want.
before:
	@echo "STOPED orchestrator" && printf '%*s\n' "40" '' | tr ' ' -
  
# Restart task will execute stop, before and start tasks in strict order and prints message. 
restart: stop before start
	@echo "STARTED orchestrator" && printf '%*s\n' "40" '' | tr ' ' -
  
# Serve task will run fswatch monitor and performs restart task if any source file changed. Before serving it will execute start task.
serve: start
	@echo "running in $(CURRENT_DIR)"
	fswatch -or --event=Updated $(CURRENT_DIR) | \
	xargs -n1 -I {} make restart

launch:
	BRIGADE_HOST=localhost \
	BRIGADE_PORT=8081 \
	MONGODB_USER=root \
	MONGODB_PASS=rootpassword \
	MONGODB_HOST=0.0.0.0 \
	MONGODB_PORT=27017 \
	go run $(GO_FILES) & echo $$! > $(PID_FILE)

mongo-up:
	docker-compose up mongo

up: mongo-up
	GENERIC_GATEWAY_HOST=localhost\
	GENERIC_GATEWAY_PORT=7745 \
	BRIGADE_API_HOST=localhost \
	BRIGADE_API_PORT=8081 \
	MONGODB_USER=root \
	MONGODB_PASS=rootpassword \
	MONGODB_HOST=0.0.0.0 \
	MONGODB_PORT=27017 \
	go run server.go

# .PHONY is used for reserving tasks words
.PHONY: start before stop restart serve launch
